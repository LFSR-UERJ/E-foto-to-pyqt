# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import QStandardItem, QStandardItemModel
from HeaderLayout import HeaderLayoutForm
from TerrainLayout import Ui_Terreno

import traceback


project = ""
lastseenproject = ""
gridlayout = QGridLayout()

class Ui_ProjectMainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(Ui_ProjectMainWindow, self).__init__(parent)
        self.setObjectName("ProjectMainWindow")
        self.resize(800, 600)
        global gridlayout
        self.setupUi()

    def setupUi(self):
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icons/WindowIcon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.setWindowIcon(icon)
        self.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.centralwidget = QWidget()
        sizePolicy = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        gridlayout = QGridLayout(self.centralwidget)
        gridlayout.setObjectName("gridlayout")
        self.gridLayoutTelaInicial = QGridLayout()
        self.gridLayoutTelaInicial.setObjectName("gridLayoutTelaInicial")
        self.introWidget = QWidget(self.centralwidget)
        self.introWidget.setAutoFillBackground(False)
        self.introWidget.setStyleSheet("background-image: url(./icons/resource/Pattern.png);")
        self.introWidget.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.introWidget.setObjectName("introWidget")
        self.horizontalLayout = QHBoxLayout(self.introWidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.verticalLayout = QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        spacerItem1 = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem1)
        self.label = QLabel(self.introWidget)
        self.label.setStyleSheet("background-image:url(:/)")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("./icons/logoefoto.png"))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.label_2 = QLabel(self.introWidget)
        self.label_2.setStyleSheet("background-image:url(:/); color:#00396e;")
        self.label_2.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.horizontalLayout_2 = QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem2 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.label_4 = QLabel(self.introWidget)
        self.label_4.setStyleSheet("background-image: url(:/);")
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("./icons/logouerj.png"))
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        self.label_3 = QLabel(self.introWidget)
        self.label_3.setStyleSheet("background-image: url(:/);")
        self.label_3.setText("")
        self.label_3.setPixmap(QtGui.QPixmap("./icons/logobrazil.png"))
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        spacerItem3 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        spacerItem4 = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem4)
        self.horizontalLayout.addLayout(self.verticalLayout)
        spacerItem5 = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem5)
        self.gridLayoutTelaInicial.addWidget(self.introWidget, 0, 0, 1, 1)
        gridlayout.addLayout(self.gridLayoutTelaInicial, 0, 0, 1, 1)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar()
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 25))
        self.menubar.setObjectName("menubar")
        self.menuProject = QMenu(self.menubar)
        self.menuProject.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
        self.menuProject.setObjectName("menuProject")
        self.menuExecute = QMenu(self.menubar)
        self.menuExecute.setObjectName("menuExecute")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.setMenuBar(self.menubar)
        self.statusbar = QStatusBar()
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.projectDockWidget = QDockWidget()
        self.projectDockWidget.setFeatures(QDockWidget.DockWidgetMovable)
        self.projectDockWidget.setAllowedAreas(QtCore.Qt.LeftDockWidgetArea|QtCore.Qt.RightDockWidgetArea)
        self.projectDockWidget.setObjectName("projectDockWidget")
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.hboxlayout = QHBoxLayout(self.dockWidgetContents)
        self.hboxlayout.setObjectName("hboxlayout")
        self.treeWidget = QTreeWidget(self.dockWidgetContents)
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget.sizePolicy().hasHeightForWidth())
        self.treeWidget.setSizePolicy(sizePolicy)
        self.treeWidget.setObjectName("treeWidget")
        self.treeWidget.header().setVisible(False)
        self.hboxlayout.addWidget(self.treeWidget)
        self.projectDockWidget.setWidget(self.dockWidgetContents)
        #hide projectDockWidget
        self.projectDockWidget.hide()
        self.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.projectDockWidget)
        self.debuggerDockWidget = QDockWidget()
        self.debuggerDockWidget.setFeatures(QDockWidget.DockWidgetFloatable|QDockWidget.DockWidgetMovable)
        self.debuggerDockWidget.setObjectName("debuggerDockWidget")
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName("dockWidgetContents_2")
        self.gridLayoutDebugger = QGridLayout(self.dockWidgetContents_2)
        self.gridLayoutDebugger.setObjectName("gridLayoutDebugger")
        self.debuggerTextEdit = QTextEdit(self.dockWidgetContents_2)
        self.debuggerTextEdit.setObjectName("debuggerTextEdit")
        self.gridLayoutDebugger.addWidget(self.debuggerTextEdit, 0, 0, 1, 1)
        self.debuggerDockWidget.setWidget(self.dockWidgetContents_2)
        #hide Debug
        self.debuggerDockWidget.hide()
        self.addDockWidget(QtCore.Qt.DockWidgetArea(4), self.debuggerDockWidget)


        self.actionNew = QAction()
        self.actionNew.setObjectName("actionNew")
        self.actionSave_file_as = QAction()
        self.actionSave_file_as.setObjectName("actionSave_file_as")
        self.actionConnect_DB = QAction()
        self.actionConnect_DB.setVisible(False)
        self.actionConnect_DB.setObjectName("actionConnect_DB")
        self.actionDisconnect_DB = QAction()
        self.actionDisconnect_DB.setVisible(False)
        self.actionDisconnect_DB.setObjectName("actionDisconnect_DB")
        self.actionExport = QAction()
        self.actionExport.setVisible(False)
        self.actionExport.setObjectName("actionExport")
        self.actionImport = QAction()
        self.actionImport.setVisible(False)
        self.actionImport.setObjectName("actionImport")
        self.actionAudit = QAction()
        self.actionAudit.setVisible(False)
        self.actionAudit.setObjectName("actionAudit")
        self.actionHeader = QAction()
        self.actionHeader.setObjectName("actionHeader")
        self.actionTerrain = QAction()
        self.actionTerrain.setObjectName("actionTerrain")
        self.actionSensors = QAction()
        self.actionSensors.setObjectName("actionSensors")
        self.actionFlights = QAction()
        self.actionFlights.setObjectName("actionFlights")
        self.actionBlocks = QAction()
        self.actionBlocks.setObjectName("actionBlocks")
        self.actionImages = QAction()
        self.actionImages.setObjectName("actionImages")
        self.actionPoints = QAction()
        self.actionPoints.setObjectName("actionPoints")
        self.actionInterior_Orientations = QAction()
        self.actionInterior_Orientations.setObjectName("actionInterior_Orientations")
        self.actionExterior_Orientations = QAction()
        self.actionExterior_Orientations.setObjectName("actionExterior_Orientations")
        self.actionFeatures = QAction()
        self.actionFeatures.setObjectName("actionFeatures")
        self.actionOrthoretifications = QAction()
        self.actionOrthoretifications.setObjectName("actionOrthoretifications")
        self.actionInterior_Orientation = QAction()
        self.actionInterior_Orientation.setObjectName("actionInterior_Orientation")
        self.actionSpatial_resection = QAction()
        self.actionSpatial_resection.setObjectName("actionSpatial_resection")
        self.actionAbout = QAction()
        self.actionAbout.setObjectName("actionAbout")
        self.actionSave_file = QAction()
        self.actionSave_file.setVisible(True)
        self.actionSave_file.setObjectName("actionSave_file")
        self.actionLoad_file = QAction()
        self.actionLoad_file.setVisible(True)
        self.actionLoad_file.setObjectName("actionLoad_file")
        self.actionSave_project = QAction()
        self.actionSave_project.setVisible(False)
        self.actionSave_project.setObjectName("actionSave_project")
        self.actionLoad_project = QAction()
        self.actionLoad_project.setVisible(False)
        self.actionLoad_project.setObjectName("actionLoad_project")
        self.actionExport_Stereo = QAction()
        self.actionExport_Stereo.setObjectName("actionExport_Stereo")
        self.actionFoto_Tri = QAction()
        self.actionFoto_Tri.setObjectName("actionFoto_Tri")
        self.actionDEMExtraction = QAction()
        self.actionDEMExtraction.setObjectName("actionDEMExtraction")
        self.actionOrtho_rectification = QAction()
        self.actionOrtho_rectification.setObjectName("actionOrtho_rectification")
        self.actionStereo = QAction()
        self.actionStereo.setObjectName("actionStereo")
        self.actionReport = QAction()
        self.actionReport.setObjectName("actionReport")
        self.actionPTReport = QAction()
        self.actionPTReport.setObjectName("actionPTReport")
        self.actionLoad_last_project = QAction()
        self.actionLoad_last_project.setEnabled(False)
        self.actionLoad_last_project.setVisible(True)
        self.actionLoad_last_project.setObjectName("actionLoad_last_project")
        self.actionQuit = QAction()
        self.actionQuit.setObjectName("actionQuit")
        self.menuProject.addAction(self.actionNew)

    #clicking new
        self.actionNew.triggered.connect(self.createProject)


        self.menuProject.addAction(self.actionLoad_last_project)
        self.menuProject.addAction(self.actionLoad_file)
        self.menuProject.addAction(self.actionSave_file)
        self.menuProject.addAction(self.actionSave_project)
        self.menuProject.addAction(self.actionLoad_project)
        self.menuProject.addAction(self.actionSave_file_as)
        self.menuProject.addSeparator()
        self.menuProject.addAction(self.actionConnect_DB)
        self.menuProject.addAction(self.actionDisconnect_DB)
        self.menuProject.addSeparator()
        self.menuProject.addAction(self.actionImport)
        self.menuProject.addAction(self.actionExport)
        self.menuProject.addSeparator()
        self.menuProject.addAction(self.actionAudit)
        self.menuProject.addAction(self.actionQuit)
        self.menuExecute.addAction(self.actionInterior_Orientation)
        self.menuExecute.addAction(self.actionSpatial_resection)
        self.menuExecute.addAction(self.actionFoto_Tri)
        self.menuExecute.addAction(self.actionStereo)
        self.menuExecute.addAction(self.actionDEMExtraction)
        self.menuExecute.addAction(self.actionOrtho_rectification)
        self.menuExecute.addSeparator()
        self.menuExecute.addAction(self.actionPTReport)
        self.menuExecute.addAction(self.actionReport)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuProject.menuAction())
        self.menubar.addAction(self.menuExecute.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.show()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("ProjectMainWindow", "efoto - Project Manager"))
        self.label_2.setText(_translate("ProjectMainWindow", "A Free GNU/GPL Educational Photogrammetric Workstation"))
        self.menuProject.setTitle(_translate("ProjectMainWindow", "Project"))
        self.menuExecute.setTitle(_translate("ProjectMainWindow", "Execute"))
        self.menuHelp.setTitle(_translate("ProjectMainWindow", "&Help"))
        self.projectDockWidget.setWindowTitle(_translate("ProjectMainWindow", "Open Project"))
        self.treeWidget.headerItem().setText(0, _translate("ProjectMainWindow", "New Project"))
        self.debuggerDockWidget.setWindowTitle(_translate("ProjectMainWindow", "Debugger"))
        self.actionNew.setText(_translate("ProjectMainWindow", "&New"))
        self.actionNew.setShortcut(_translate("ProjectMainWindow", "Ctrl+N"))
        self.actionSave_file_as.setText(_translate("ProjectMainWindow", "Save file &as"))
        self.actionSave_file_as.setShortcut(_translate("ProjectMainWindow", "Ctrl+A"))
        self.actionConnect_DB.setText(_translate("ProjectMainWindow", "Connect DB"))
        self.actionDisconnect_DB.setText(_translate("ProjectMainWindow", "Disconnect DB"))
        self.actionExport.setText(_translate("ProjectMainWindow", "Export"))
        self.actionImport.setText(_translate("ProjectMainWindow", "Import"))
        self.actionAudit.setText(_translate("ProjectMainWindow", "Audit"))
        self.actionHeader.setText(_translate("ProjectMainWindow", "Header"))
        self.actionTerrain.setText(_translate("ProjectMainWindow", "Terrain"))
        self.actionSensors.setText(_translate("ProjectMainWindow", "Sensors"))
        self.actionFlights.setText(_translate("ProjectMainWindow", "Flights"))
        self.actionBlocks.setText(_translate("ProjectMainWindow", "Blocks"))
        self.actionImages.setText(_translate("ProjectMainWindow", "Images"))
        self.actionPoints.setText(_translate("ProjectMainWindow", "Points"))
        self.actionInterior_Orientations.setText(_translate("ProjectMainWindow", "Interior Orientations"))
        self.actionExterior_Orientations.setText(_translate("ProjectMainWindow", "Exterior Orientations"))
        self.actionFeatures.setText(_translate("ProjectMainWindow", "Features"))
        self.actionOrthoretifications.setText(_translate("ProjectMainWindow", "Orthoretifications"))
        self.actionInterior_Orientation.setText(_translate("ProjectMainWindow", "&Interior Orientation"))
        self.actionInterior_Orientation.setShortcut(_translate("ProjectMainWindow", "Ctrl+I"))
        self.actionSpatial_resection.setText(_translate("ProjectMainWindow", "Spatial R&esection"))
        self.actionSpatial_resection.setToolTip(_translate("ProjectMainWindow", "Spatial Resection"))
        self.actionSpatial_resection.setShortcut(_translate("ProjectMainWindow", "Ctrl+E"))
        self.actionAbout.setText(_translate("ProjectMainWindow", "About"))
        self.actionSave_file.setText(_translate("ProjectMainWindow", "&Save file"))
        self.actionSave_file.setShortcut(_translate("ProjectMainWindow", "Ctrl+S"))
        self.actionLoad_file.setText(_translate("ProjectMainWindow", "&Open file"))
        self.actionLoad_file.setShortcut(_translate("ProjectMainWindow", "Ctrl+O"))
        self.actionSave_project.setText(_translate("ProjectMainWindow", "Save project"))
        self.actionLoad_project.setText(_translate("ProjectMainWindow", "Load project"))
        self.actionExport_Stereo.setText(_translate("ProjectMainWindow", "&Export Stereo File"))
        self.actionExport_Stereo.setToolTip(_translate("ProjectMainWindow", "Export a file to be used on Stereoplotter or DSM File"))
        self.actionFoto_Tri.setText(_translate("ProjectMainWindow", "Photo &Triangulation"))
        self.actionFoto_Tri.setShortcut(_translate("ProjectMainWindow", "Ctrl+T"))
        self.actionDEMExtraction.setText(_translate("ProjectMainWindow", "&DSM-Extraction"))
        self.actionDEMExtraction.setShortcut(_translate("ProjectMainWindow", "Ctrl+D"))
        self.actionOrtho_rectification.setText(_translate("ProjectMainWindow", "Ortho-&Rectification"))
        self.actionOrtho_rectification.setToolTip(_translate("ProjectMainWindow", "Ortho-Rectification"))
        self.actionOrtho_rectification.setShortcut(_translate("ProjectMainWindow", "Ctrl+R"))
        self.actionStereo.setText(_translate("ProjectMainWindow", "Stereo &Plotter"))
        self.actionStereo.setShortcut(_translate("ProjectMainWindow", "Ctrl+P"))
        self.actionReport.setText(_translate("ProjectMainWindow", "Pro&ject Report"))
        self.actionReport.setShortcut(_translate("ProjectMainWindow", "Ctrl+J"))
        self.actionPTReport.setText(_translate("ProjectMainWindow", "Photo-triangulation &Full Report"))
        self.actionPTReport.setShortcut(_translate("ProjectMainWindow", "Ctrl+F"))
        self.actionLoad_last_project.setText(_translate("ProjectMainWindow", "&Last project"))
        self.actionLoad_last_project.setShortcut(_translate("ProjectMainWindow", "Ctrl+L"))
        self.actionQuit.setText(_translate("ProjectMainWindow", "&Quit"))
        self.actionQuit.setShortcut(_translate("ProjectMainWindow", "Ctrl+Q"))

    def showHeaderLayout(self):
        global project
        global lastseenproject
        global gridlayout
        if project:
            self.clearLayout(gridlayout)
            lastseenproject = project
            self.HeaderLayout = HeaderLayoutForm(self)
            #self.setStyleSheet("background-color:Lightgrey")
            self.label_4.hide()
            self.label_3.hide()
            self.label_2.hide()
            self.label.hide()
            self.introWidget.hide()
            self.gridLayoutTelaInicial.addWidget(self.HeaderLayout)
            self.projectDockWidget.setWidget(ETree(self))
            self.projectDockWidget.show()


    def clearLayout(cls, layout):
        while layout.count():
            child = layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()

    def createProject(self):
        global project
        url = QFileDialog.getSaveFileName(self, "Criar Projeto", "", "*.epp")
        project = url[0]
        if project:
            self.showHeaderLayout()

class ETree(QTreeWidget):
    global project
    global lastseenproject
    global gridlayout

    def __init__(self, parent=None):
        super(ETree, self).__init__(parent)
        self.treeUI()
        self.itemClicked.connect(self.Eclicked)

    def treeUI(self):
        #http://3plus.hatenablog.com/entry/2014/09/12/222738
        tree = [("Project Header",0,None)
            , ("Terrain",1,None)
            ,("Sensor",2,None)
            ,("Flight",3,None)
            ,("Images",4,None)
            ,("Points",5,None)]

        self.addTopLevelItems(self.returnTree(tree))
        self.itemDelegate()
        self.header().hide()
        self.setIndentation(20)
        self.setStyleSheet(
'''
QTreeView::branch:has-siblings:!adjoins-item {
    border-image: url(./icons/branch/vline.png) 0;
}

QTreeView::branch:has-siblings:adjoins-item {
    border-image: url(./icons/branch/branch-more.png) 0;
}

QTreeView::branch:!has-children:!has-siblings:adjoins-item {
    border-image: url(./icons/branch/branch-end.png) 0;
}
QTreeView::item:selected:active{
background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #6ea1f1, stop: 1 #567dbc);
}

''')

    def returnTree(self, lst=[]):

        items = []
        while len(lst):
            k, v, n = lst.pop(0)
            item = QTreeWidgetItem([k])
            item.setData(0, QtCore.Qt.UserRole, v)
            items.append(item)
            if n is not None:
                items[-1].addChildren(self.returnTree(n))

        return items

    def Eclicked(self, it, col):
        #print(it, col, it.text(col))
        if it.text(col) == "Project Header":
            self.parent().parent().clearLayout(self.parent().parent().gridLayoutTelaInicial)
            self.HeaderLayout = HeaderLayoutForm(self)
            self.parent().parent().gridLayoutTelaInicial.addWidget(self.HeaderLayout)
        elif it.text(col) == "Terrain":
            if project:
                self.parent().parent().clearLayout(self.parent().parent().gridLayoutTelaInicial)
                self.HeaderLayout = Ui_Terreno(self)
                self.parent().parent().gridLayoutTelaInicial.addWidget(self.HeaderLayout)

        elif it.text(col) == "Sensor":
            print("2")
        elif it.text(col) == "Flight":
            print("3")
        elif it.text(col) == "Images":
            print("4")
        elif it.text(col) == "Points":
            print("5")
        else:
            pass

def main():
    App = QApplication(sys.argv)
    window = Ui_ProjectMainWindow()

    sys.exit(App.exec_())

if __name__ == "__main__":
    main()

